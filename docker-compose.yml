services:
  # Create the RabbitMQ service
  message-broker:
    image: rabbitmq:3-management-alpine
    container_name: message-broker
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq
      - ./rabbitmq:/var/log/rabbitmq
    restart: always
    networks:
      - stock-network
    environment:
      - RABBITMQ_DEFAULT_USER=stockmarket
      - RABBITMQ_DEFAULT_PASS=supersecret123
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 15s
      retries: 5

  # Create the Golang service for Producer
  producer:
    container_name: rmq-producer
    ports:
      - "5050:5050"
    build: ./stock-publisher
    restart: always
    depends_on:
      - message-broker
    networks:
      - stock-network

  # Create the Golang service for Consumer
  consumer:
    container_name: rmq-consumer
    ports:
      - "5051:5051"
    build: ./consumer
    restart: always
    depends_on:
      - message-broker
      - mongodb
    networks:
      - stock-network

  # Create the MongoDB service
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    container_name: MongoDB
    # deploy:
    #   mode: replicated
    #   replicas: 3
    restart: always
    volumes:
      - ./mongodb:/data/db
    networks:
      - stock-network

networks:
  stock-network:
    driver: bridge
