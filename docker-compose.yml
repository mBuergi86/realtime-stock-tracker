services:
  # Create the RabbitMQ service
  message-broker:
    image: rabbitmq:3-management-alpine
    container_name: message-broker
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - "rabbitmq_data:/var/lib/rabbitmq"
      - "rabbitmq_log:/var/log/rabbitmq"
    restart: always
    networks:
      - stock-network
    environment:
      - RABBITMQ_DEFAULT_USER=stockmarket
      - RABBITMQ_DEFAULT_PASS=supersecret123
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 15s
      retries: 5

  # Create the Golang service for Producer
  producer:
    container_name: rmq-producer
    build: ./stock-publisher
    restart: always
    depends_on:
      - message-broker
    environment:
      - RABBITMQ_CONNECTION_URL=amqp://stockmarket:supersecret123@message-broker:5672/
    networks:
      - stock-network

  # Create the Golang service for AAPL Consumer
  aapl_consumer:
    container_name: aapl-consumer
    build: ./consumer
    command: ["./aapl_consumer"]
    restart: always
    depends_on:
      - message-broker
      - mongo1
      - mongo2
      - mongo3
    environment:
      - RABBITMQ_CONNECTION_URL=amqp://stockmarket:supersecret123@message-broker:5672/
      - MONGODB_URI=mongodb://host.docker.internal:27017,host.docker.internal:27018,host.docker.internal:27019/?replicaSet=rs0
      - MONGODB_DATABASE=stockmarket
      - MONGODB_COLLECTION=stocks
    networks:
      - stock-network
      - mongoCluster

  # Create the Golang service for MSFT Consumer
  msft_consumer:
    container_name: msft-consumer
    build: ./consumer
    command: ["./msft_consumer"]
    restart: always
    depends_on:
      - message-broker
      - mongo1
      - mongo2
      - mongo3
    environment:
      - RABBITMQ_CONNECTION_URL=amqp://stockmarket:supersecret123@message-broker:5672/
      - MONGODB_URI=mongodb://host.docker.internal:27017,host.docker.internal:27018,host.docker.internal:27019/?replicaSet=rs0
      - MONGODB_DATABASE=stockmarket
      - MONGODB_COLLECTION=stocks
    networks:
      - stock-network
      - mongoCluster

  # Create the Golang service for TSLA Consumer
  tsla_consumer:
    container_name: tsla-consumer
    build: ./consumer
    command: ["./tsla_consumer"]
    restart: always
    depends_on:
      - message-broker
      - mongo1
      - mongo2
      - mongo3
    environment:
      - RABBITMQ_CONNECTION_URL=amqp://stockmarket:supersecret123@message-broker:5672/
      - MONGODB_URI=mongodb://host.docker.internal:27017,host.docker.internal:27018,host.docker.internal:27019/?replicaSet=rs0
      - MONGODB_DATABASE=stockmarket
      - MONGODB_COLLECTION=stocks
    networks:
      - stock-network
      - mongoCluster

  # Create the Mongo1 service
  mongo1:
    image: mongo:latest
    container_name: mongo1
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    ports:
      - 27017:27017
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017', priority:1}, {_id:1,host:'host.docker.internal:27018', priority:0.5}, {_id:2,host:'host.docker.internal:27019', priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 10s
      timeout: 30s
      start_period: 30s
      retries: 30
    volumes:
      - "mongo1_data:/data/db"
      - "mongo1_config:/data/configdb"
    networks:
      - mongoCluster

  # Create the Mongo2 service
  mongo2:
    image: mongo:latest
    container_name: mongo2
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    ports:
      - 27018:27018
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "mongo2_data:/data/db"
      - "mongo2_config:/data/configdb"
    networks:
      - mongoCluster

  # Create the Mongo3 service
  mongo3:
    image: mongo:latest
    container_name: mongo3
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    ports:
      - 27019:27019
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "mongo3_data:/data/db"
      - "mongo3_config:/data/configdb"
    networks:
      - mongoCluster

  # Create the Frontend services
  frontend-1:
    container_name: frontend-1
    build: ./stock-liveview
    restart: always
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    ports:
      - "3000:3000"
    networks:
      - mongoCluster

  frontend-2:
    container_name: frontend-2
    build: ./stock-liveview
    restart: always
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    ports:
      - "3001:3000"
    networks:
      - mongoCluster

  frontend-3:
    container_name: frontend-3
    build: ./stock-liveview
    restart: always
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    ports:
      - "3002:3000"
    networks:
      - mongoCluster

  # Create the Nginx service
  nginx:
    image: nginx:latest
    container_name: nginx
    build: ./nginx
    restart: always
    depends_on:
      - frontend-1
      - frontend-2
      - frontend-3
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - mongoCluster

networks:
  stock-network:
    driver: bridge
  mongoCluster:
    driver: bridge

volumes:
  mongo1_data:
  mongo1_config:
  mongo2_data:
  mongo2_config:
  mongo3_data:
  mongo3_config:
  rabbitmq_data:
  rabbitmq_log:
